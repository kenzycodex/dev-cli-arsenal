name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # Validate repository structure and basic functionality
  validate:
    name: Validate Repository
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Check essential files
      run: |
        echo "Checking repository structure..."
        test -f package.json && echo "‚úÖ package.json found"
        test -f scripts/install.sh && echo "‚úÖ install.sh found"
        test -f scripts/verify-tools.js && echo "‚úÖ verify-tools.js found"
        test -f tools/tool-installer.js && echo "‚úÖ tool-installer.js found"
        test -f README.md && echo "‚úÖ README.md found"
        
    - name: Validate package.json
      run: |
        echo "Validating package.json..."
        node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"
        echo "‚úÖ package.json is valid JSON"
        
    - name: Check Node.js and pnpm versions
      run: |
        echo "Node.js version: $(node --version)"
        echo "pnpm version: $(pnpm --version)"

  # Install dependencies and run quality checks
  quality:
    name: Code Quality & Dependencies
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: |
        echo "Installing dependencies with pnpm..."
        pnpm install --frozen-lockfile
        
    - name: Run linting
      run: |
        echo "Running ESLint..."
        pnpm run lint || echo "‚ö†Ô∏è Linting issues found"
        
    - name: Run formatting check
      run: |
        echo "Checking code formatting..."
        pnpm run format:check || echo "‚ö†Ô∏è Formatting issues found"
        
    - name: Validate JSON and YAML files
      run: |
        echo "Validating configuration files..."
        # Validate JSON files
        find . -name "*.json" -not -path "./node_modules/*" | while read file; do
          echo "Validating $file"
          node -e "JSON.parse(require('fs').readFileSync('$file', 'utf8'))" || echo "‚ö†Ô∏è Invalid JSON: $file"
        done
        
        # Check pnpm-lock.yaml exists and is valid
        test -f pnpm-lock.yaml && echo "‚úÖ pnpm-lock.yaml found" || echo "‚ö†Ô∏è pnpm-lock.yaml missing"

  # Test scripts across different platforms
  test-scripts:
    name: Test Scripts (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Install global tools for testing
      run: |
        echo "Installing essential tools for testing..."
        pnpm add -g @antfu/ni rimraf serve nodemon
        
    - name: Test verification script
      run: |
        echo "Testing tool verification script..."
        node scripts/verify-tools.js --critical-only
        
    - name: Test interactive installer help
      run: |
        echo "Testing interactive installer..."
        node tools/tool-installer.js --help
        node tools/tool-installer.js --version
        
    - name: Test installation script (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "Testing Unix installation script..."
        chmod +x scripts/install.sh
        bash scripts/install.sh --help
        
    - name: Test installation script (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        echo "Testing Windows installation script..."
        Get-Help scripts/install.ps1 -ErrorAction SilentlyContinue

  # Run tests if they exist
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [validate, quality]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run tests
      run: |
        if pnpm run test --if-present; then
          echo "‚úÖ Tests passed"
        else
          echo "‚ö†Ô∏è No tests found or tests failed"
        fi

  # Security and dependency checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run security audit
      run: |
        echo "Running security audit..."
        pnpm audit --audit-level moderate || echo "‚ö†Ô∏è Security vulnerabilities found"
        
    - name: Check for outdated dependencies
      run: |
        echo "Checking for outdated dependencies..."
        pnpm outdated || echo "üì¶ Some dependencies may be outdated"

  # Documentation and README checks
  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check documentation structure
      run: |
        echo "Checking documentation structure..."
        
        # Essential files
        test -f README.md && echo "‚úÖ README.md exists"
        test -f CONTRIBUTING.md && echo "‚úÖ CONTRIBUTING.md exists" || echo "üìù CONTRIBUTING.md missing"
        test -f LICENSE && echo "‚úÖ LICENSE exists" || echo "üìù LICENSE missing"
        test -f CHANGELOG.md && echo "‚úÖ CHANGELOG.md exists" || echo "üìù CHANGELOG.md missing"
        
        # README content checks
        if grep -q "Quick Start" README.md; then
          echo "‚úÖ README has Quick Start section"
        else
          echo "üìù README missing Quick Start section"
        fi
        
        if grep -q "Installation" README.md; then
          echo "‚úÖ README has Installation section"
        else
          echo "üìù README missing Installation section"
        fi
        
        if grep -q "pnpm" README.md; then
          echo "‚úÖ README mentions pnpm"
        else
          echo "üìù README should mention pnpm usage"
        fi
        
    - name: Check for broken internal links
      run: |
        echo "Checking for potential broken internal links..."
        grep -r "](\./" README.md || echo "üìù No internal links found"

  # Build and package validation
  build:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run build if available
      run: |
        if pnpm run build --if-present; then
          echo "‚úÖ Build successful"
        else
          echo "üìù No build script found"
        fi
        
    - name: Check package can be packed
      run: |
        echo "Testing package creation..."
        pnpm pack --dry-run
        echo "‚úÖ Package can be created successfully"

  # Final summary
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [validate, quality, test-scripts, test, security, documentation, build]
    if: always()
    
    steps:
    - name: Check overall results
      run: |
        echo "üîç CI Pipeline Summary"
        echo "====================="
        echo "Validate: ${{ needs.validate.result }}"
        echo "Quality: ${{ needs.quality.result }}"
        echo "Test Scripts: ${{ needs.test-scripts.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Documentation: ${{ needs.documentation.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo ""
        
        # Count critical failures
        critical_failures=0
        
        # Critical jobs that must pass
        [[ "${{ needs.validate.result }}" == "failure" ]] && ((critical_failures++))
        [[ "${{ needs.quality.result }}" == "failure" ]] && ((critical_failures++))
        [[ "${{ needs.test-scripts.result }}" == "failure" ]] && ((critical_failures++))
        
        # Semi-critical jobs
        semi_critical_failures=0
        [[ "${{ needs.test.result }}" == "failure" ]] && ((semi_critical_failures++))
        [[ "${{ needs.security.result }}" == "failure" ]] && ((semi_critical_failures++))
        
        # Non-critical jobs
        non_critical_failures=0
        [[ "${{ needs.documentation.result }}" == "failure" ]] && ((non_critical_failures++))
        [[ "${{ needs.build.result }}" == "failure" ]] && ((non_critical_failures++))
        
        echo "Critical failures: $critical_failures"
        echo "Semi-critical failures: $semi_critical_failures"
        echo "Non-critical failures: $non_critical_failures"
        echo ""
        
        if [[ $critical_failures -gt 0 ]]; then
          echo "‚ùå Critical jobs failed - CI unsuccessful"
          exit 1
        elif [[ $semi_critical_failures -gt 1 ]]; then
          echo "‚ö†Ô∏è Multiple semi-critical jobs failed - review needed"
          exit 1
        elif [[ $((semi_critical_failures + non_critical_failures)) -gt 0 ]]; then
          echo "‚ö†Ô∏è Some jobs failed but CI passes - review recommended"
          echo "‚úÖ CI Pipeline completed with warnings"
        else
          echo "‚úÖ All jobs passed - CI successful!"
        fi
